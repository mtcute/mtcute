{{emit_if (not features.typescript)}}
{{#if (eq runtime "deno")}}
import '@std/dotenv/load'

const API_ID = Number.parseInt(Deno.env.get('API_ID'))
const API_HASH = Deno.env.get('API_HASH')
{{#if botToken}}
const BOT_TOKEN = Deno.env.get('BOT_TOKEN')
{{/if}}
{{else}}
import process from 'node:process'
{{#if features.envalid}}
import 'dotenv/config'
import { cleanEnv, num, str } from 'envalid'

const env = cleanEnv(process.env, {
    API_ID: num(),
    API_HASH: str(),
    BOT_TOKEN: str({ default: undefined }),
})
{{else}}
const API_ID = Number.parseInt(process.env.API_ID)
const API_HASH = process.env.API_HASH
{{#if botToken}}
const BOT_TOKEN = process.env.BOT_TOKEN
{{/if}}
{{/if}}

{{#unless features.envalid}}
if (Number.isNaN(API_ID) || !API_HASH) {
    throw new Error('API_ID or API_HASH not set!')
}
{{/unless}}

{{#if features.envalid}}
export default env
{{else}}
export { API_HASH, API_ID{{#if botToken}}, BOT_TOKEN{{/if}} }
{{/if}}
{{/if}}
