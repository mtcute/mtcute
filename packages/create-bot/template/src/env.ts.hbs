{{emit_if features.typescript}}
{{#if features.zod}}
{{#if (eq runtime "deno")}}
import '@std/dotenv/load'
import { z } from '@zod/zod'
{{else}}
import { z } from 'zod'
{{/if}}

const r = z.object({
    API_ID: z.coerce.number(),
    API_HASH: z.string(),
    {{#if botToken}}
    BOT_TOKEN: z.string(),
    {{/if}}
{{#if (eq runtime "deno")}}
}).safeParse(Deno.env.toObject())
{{else}}
}).safeParse(process.env)
{{/if}}

if (!r.success) {
    throw new Error('Invalid env:\n' + z.prettifyError(r.error))
}

export const env = r.data
{{else}}
{{#if (eq runtime "deno")}}
import '@std/dotenv/load'

const API_ID = Number.parseInt(Deno.env.get('API_ID')!)
const API_HASH = Deno.env.get('API_HASH')!
{{#if botToken}}
const BOT_TOKEN = Deno.env.get('BOT_TOKEN')!
{{/if}}
{{else}}
import process from 'node:process'

const API_ID = Number.parseInt(process.env.API_ID!)
const API_HASH = process.env.API_HASH!
{{#if botToken}}
const BOT_TOKEN = process.env.BOT_TOKEN!
{{/if}}
{{/if}}

if (Number.isNaN(API_ID) || !API_HASH) {
    throw new Error('API_ID or API_HASH not set!')
}

export { API_ID, API_HASH{{#if botToken}}, BOT_TOKEN{{/if}} }
{{/if}}
