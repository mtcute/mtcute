import {
    BotChatJoinRequestUpdate,
    CallbackQuery,
    ChatMemberUpdate,
    ChosenInlineResult,
    InlineQuery,
    Message,
    PollVoteUpdate,
    User,
    UserStatusUpdate,
    UserTypingUpdate,
} from '@mtcute/client'
import { MaybeArray } from '@mtcute/core'

import { UpdateFilter } from './types'

/**
 * Filter messages generated by yourself (including Saved Messages)
 */
export const me: UpdateFilter<Message, { sender: User }> = (msg) =>
    (msg.sender.type === 'user' && msg.sender.isSelf) || msg.isOutgoing

/**
 * Filter messages sent by bots
 */
export const bot: UpdateFilter<Message, { sender: User }> = (msg) => msg.sender.constructor === User && msg.sender.isBot

/**
 * Filter updates by user ID(s) or username(s)
 *
 * Usernames are not supported for UserStatusUpdate
 * and UserTypingUpdate.
 *
 *
 * For chat member updates, uses `user.id`
 */
export const userId = (
    id: MaybeArray<number | string>,
): UpdateFilter<
    | Message
    | UserStatusUpdate
    | UserTypingUpdate
    | InlineQuery
    | ChatMemberUpdate
    | ChosenInlineResult
    | CallbackQuery
    | PollVoteUpdate
    | BotChatJoinRequestUpdate
> => {
    if (Array.isArray(id)) {
        const index: Record<number | string, true> = {}
        let matchSelf = false
        id.forEach((id) => {
            if (id === 'me' || id === 'self') {
                matchSelf = true
            } else {
                index[id] = true
            }
        })

        return (upd) => {
            const ctor = upd.constructor

            if (ctor === Message) {
                const sender = (upd as Message).sender

                return (matchSelf && sender.isSelf) || sender.id in index || sender.username! in index
            } else if (ctor === UserStatusUpdate || ctor === UserTypingUpdate) {
                // const id = (upd as UserStatusUpdate | UserTypingUpdate).userId

                return false
                // todo
                // eslint-disable-next-line dot-notation
                // (matchSelf && id === upd.client['_userId']) || id in index
            } else if (ctor === PollVoteUpdate) {
                const peer = (upd as PollVoteUpdate).peer
                if (peer.type !== 'user') return false

                return (matchSelf && peer.isSelf) || peer.id in index || peer.username! in index
            }

            const user = (upd as Exclude<typeof upd, Message | UserStatusUpdate | UserTypingUpdate | PollVoteUpdate>)
                .user

            return (matchSelf && user.isSelf) || user.id in index || user.username! in index
        }
    }

    if (id === 'me' || id === 'self') {
        return (upd) => {
            const ctor = upd.constructor

            if (ctor === Message) {
                return (upd as Message).sender.isSelf
            } else if (ctor === UserStatusUpdate || ctor === UserTypingUpdate) {
                return false
                // todo
                // (upd as UserStatusUpdate | UserTypingUpdate).userId ===
                // eslint-disable-next-line dot-notation
                // upd.client['_userId']
            } else if (ctor === PollVoteUpdate) {
                const peer = (upd as PollVoteUpdate).peer
                if (peer.type !== 'user') return false

                return peer.isSelf
            }

            return (upd as Exclude<typeof upd, Message | UserStatusUpdate | UserTypingUpdate | PollVoteUpdate>).user
                .isSelf
        }
    }

    if (typeof id === 'string') {
        return (upd) => {
            const ctor = upd.constructor

            if (ctor === Message) {
                return (upd as Message).sender.username === id
            } else if (ctor === UserStatusUpdate || ctor === UserTypingUpdate) {
                // username is not available
                return false
            } else if (ctor === PollVoteUpdate) {
                const peer = (upd as PollVoteUpdate).peer
                if (peer.type !== 'user') return false

                return peer.username === id
            }

            return (
                (upd as Exclude<typeof upd, Message | UserStatusUpdate | UserTypingUpdate | PollVoteUpdate>).user
                    .username === id
            )
        }
    }

    return (upd) => {
        const ctor = upd.constructor

        if (ctor === Message) {
            return (upd as Message).sender.id === id
        } else if (ctor === UserStatusUpdate || ctor === UserTypingUpdate) {
            return (upd as UserStatusUpdate | UserTypingUpdate).userId === id
        } else if (ctor === PollVoteUpdate) {
            const peer = (upd as PollVoteUpdate).peer
            if (peer.type !== 'user') return false

            return peer.id === id
        }

        return (
            (upd as Exclude<typeof upd, Message | UserStatusUpdate | UserTypingUpdate | PollVoteUpdate>).user.id === id
        )
    }
}
